package org.aion;

import avm.Address;
import org.aion.avm.userlib.abi.ABIStreamingEncoder;

//TODO: it is expected that this file could be autogenerated by Aion toolchain in the future see https://github.com/aionnetwork/AVM/issues/401

public class AIP040Encoder {
  public static byte[] deploy(String tokenName, String tokenSymbol, String tokenUriBase) {
    return new ABIStreamingEncoder()
        .encodeOneString(tokenName)
        .encodeOneString(tokenSymbol)
        .encodeOneString(tokenUriBase)
        .toBytes();
  }
  
  public static byte[] aip040OwnerOf(byte[] tokenId) {
    return new ABIStreamingEncoder()
        .encodeOneString("aip040OwnerOf")
        .encodeOneByteArray(tokenId)
        .toBytes();
  }
  
  public static byte[] aip040ConsigneeOf(byte[] tokenId) {
    return new ABIStreamingEncoder()
        .encodeOneString("aip040ConsigneeOf")
        .encodeOneByteArray(tokenId)
        .toBytes();
  }
  
  public static byte[] aip040IsAuthorized(Address owner, Address authorizee) {
    return new ABIStreamingEncoder()
        .encodeOneString("aip040IsAuthorized")
        .encodeOneAddress(owner)
        .encodeOneAddress(authorizee)
        .toBytes();
  }
  
  public static byte[] aip040BalanceOf(Address owner) {
    return new ABIStreamingEncoder()
        .encodeOneString("aip040BalanceOf")
        .encodeOneAddress(owner)
        .toBytes();
  }
  
  //TODO: why wont this next line compile?
  /*
    public static byte[] aip040Transfer(Address currentOwner, Address newOwner, byte[] tokenId) {
      return new ABIStreamingEncoder()
          .encodeOneString("aip040Transfer")
          .encodeOneAddress(currentOwner)
          .encodeOneAddress(newOwner)
          .encodeOneByteArray(tokenId)
          .toBytes();
    );
    */
    
    public static byte[] aip040Consign(Address owner, Address consignee, byte[] tokenId) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040Consign")
      .encodeOneAddress(owner)
      .encodeOneAddress(consignee)
      .encodeOneByteArray(tokenId)
      .toBytes();
    }
    
    public static byte[] aip040Authorize(Address authorizee) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040Authorize")
      .encodeOneAddress(authorizee)
      .toBytes();
    }
    
    public static byte[] aip040Deauthorize(Address priorAuthorizee) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040Deauthorize")
      .encodeOneAddress(priorAuthorizee)
      .toBytes();
    }
    
    public static byte[] aip040Name() {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040Name")
      .toBytes();
    }
    
    public static byte[] aip040Symbol() {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040Symbol")
      .toBytes();
    }
    
    public static byte[] aip040TokenURI(byte[] tokenId) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040TokenURI")
      .encodeOneByteArray(tokenId)
      .toBytes();
    }
    
    public static byte[] aip040TotalSupply() {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040TotalSupply")
      .toBytes();
    }
    
    public static byte[] aip040TokenByIndex(byte[] index) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040TokenByIndex")
      .encodeOneByteArray(index)
      .toBytes();
    }
    
    public static byte[] aip040TokenOfOwnerByIndex(Address owner, byte[] index) {
      return new ABIStreamingEncoder()
      .encodeOneString("aip040TokenOfOwnerByIndex")
      .encodeOneAddress(owner)
      .encodeOneByteArray(index)
      .toBytes();
    }
  }